{
	"info": {
		"_postman_id": "464c1c35-be73-4f9d-a5a5-660b96f4fb67",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "The First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"    pm.test(\"Correct string\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let name = jsonData.name\r",
							"let age = jsonData.age;\r",
							"let salary = jsonData.salary;\r",
							"let family = jsonData.family;\r",
							"let salary_4 = jsonData.u_salary_1_5_year;\r",
							"\r",
							"\r",
							"// Спарсить request.\r",
							"\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"let req_family = req.family;\r",
							"let req_salary_1_5 = req.salary * 4;\r",
							"\r",
							"\r",
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"pm.test(\"name\", function(){\r",
							"    pm.expect(name).to.eql(\"Alex\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age c request (age вбить руками.)\r",
							"pm.test(\"age\", function(){\r",
							"    pm.expect(age).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary\", function(){\r",
							"    pm.expect(salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_req\", function(){\r",
							"    pm.expect(req_name).to.eql(\"Alex\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age_reg\", function(){\r",
							"    pm.expect(req_age).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary_req\", function(){\r",
							"    pm.expect(req_salary).to.eql(\"1000\");\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(\"response_family - \", family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary_1_5\", function(){\r",
							"    pm.expect(req_salary_1_5).to.eql(4000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "default"
						},
						{
							"key": "age",
							"value": "27",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						},
						{
							"key": "family",
							"value": "1",
							"type": "default"
						},
						{
							"key": "salary_4",
							"value": "4000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let resp_name = jsonData.name;\r",
							"let resp_age = jsonData.age;\r",
							"let resp_salary = String(jsonData.salary);\r",
							"let resp_family = jsonData.family;\r",
							"let resp_dog = jsonData.family.pets.dog;\r",
							"let resp_name_dog = jsonData.family.pets.dog.name;\r",
							"let resp_age_dog = jsonData.family.pets.dog.age;\r",
							"\r",
							"//Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name\", function(){\r",
							"    pm.expect(resp_name).to.eql(name);\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age\", function(){\r",
							"    pm.expect(resp_age).to.eql(age);\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary\", function(){\r",
							"    pm.expect(resp_salary).to.eql(salary);\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(\"response_family -\", resp_family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog_name\", function() {\r",
							"    pm.expect(JSON.stringify(resp_dog)).to.include(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_age\", function() {\r",
							"    pm.expect(JSON.stringify(resp_dog)).to.include(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name_DOG\", function() {\r",
							"    pm.expect(resp_name_dog).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"//Gроверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Age_DOG\", function() {\r",
							"    pm.expect(resp_age_dog).to.eql(4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "default",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "default",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "default",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "default",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "default",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "default",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=27&salary=1000&family=1&name_dog=Luky&age_dog=4",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						},
						{
							"key": "family",
							"value": "1"
						},
						{
							"key": "name_dog",
							"value": "Luky"
						},
						{
							"key": "age_dog",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let resp_name = jsonData.name;\r",
							"let resp_age = String(jsonData.age);\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"// Статус код 200. \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(\"Request_salary -\", req_salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(\"Response_salary -\", resp_salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"pm.test(\"Salary_1\", function(){\r",
							"    pm.expect(String(resp_salary[0])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Salary_2\", function(){\r",
							"    pm.expect(String(resp_salary[1])).to.eql(String(req_salary*2));\r",
							"});\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Salary_3\", function(){\r",
							"    pm.expect(String(resp_salary[2])).to.eql(String(req_salary*3));\r",
							"});\r",
							"\r",
							"//pm.enivironment.set(\"name, req_name\");\r",
							"//pm.enivironment.set(\"age, req_age\");\r",
							"//pm.enivironment.set(\"salary, salary\");\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i <3: i++) {\r",
							"    console.log(jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "27",
							"description": "req_rew"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let start_salary = jsonData.start_qa_salary;\r",
							"let month_6_salary = jsonData.qa_salary_after_6_months;\r",
							"let month_12_salary = jsonData.qa_salary_after_12_months;\r",
							"let month_18_salary = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"let month_42_salary = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"let person_u_name = jsonData.person.u_name;\r",
							"let person_u_age = jsonData.person.u_age;\r",
							"let salary_5_years = jsonData.person.u_salary_5_years;\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"let req_salary = req.salary;\r",
							"let req_age = req.age;\r",
							"let req_name =  req.name;\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Proverka_1\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Proverka_2\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Proverka_3\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Proverka_4\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Proverka_5\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Proverka_6\", function(){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_1\", function(){\r",
							"    pm.expect(String(start_salary)).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_2\", function(){\r",
							"    pm.expect(month_6_salary).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_3\", function(){\r",
							"    pm.expect(month_12_salary).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_4\", function(){\r",
							"    pm.expect(month_18_salary).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_5\", function(){\r",
							"    pm.expect(month_42_salary).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\\\r",
							"pm.test(\"1_name\", function() {\r",
							"   pm.expect(String(person_u_name[1])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age\", function() {\r",
							"   pm.expect(String(person_u_age)).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_5_years\", function() {\r",
							"   pm.expect(salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (let i = 0; i<3; i++){\r",
							"    if (i==0){\r",
							"        console.log(jsonData.person.u_age)\r",
							"    }else if (i==1) {\r",
							"        console.log(jsonData.person.u_name)\r",
							"    }else (console.log(jsonData.person.u_salary_5_years)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}